const readline = require("readline");

// =============================================
// M√ÅQUINA DE TURING - Implementa√ß√£o em JavaScript
// =============================================
// Uma M√°quina de Turing √© um modelo matem√°tico de computa√ß√£o que consiste em:
// 1. Uma fita infinita dividida em c√©lulas
// 2. Um cabe√ßote que l√™/escreve s√≠mbolos na fita
// 3. Um conjunto de estados que controlam o comportamento
// 4. Uma tabela de transi√ß√µes que define as a√ß√µes

// Classe da M√°quina de Turing
class MaquinaDeTuring {
  // Construtor: inicializa a m√°quina com os par√¢metros necess√°rios
  constructor(fita, tabelaDeTransicoes, estadoInicial, simboloBranco = "_") {
    this.fita = fita.split(""); // Converte a string em array de caracteres
    this.cabecote = 0; // Posi√ß√£o atual do cabe√ßote (come√ßa na posi√ß√£o 0)
    this.estado = estadoInicial; // Estado atual da m√°quina (come√ßa no estado inicial)
    this.tabelaDeTransicoes = tabelaDeTransicoes; // Regras que definem o comportamento
    this.simboloBranco = simboloBranco; // S√≠mbolo que representa uma c√©lula vazia
  }

  // Executa um √∫nico passo da m√°quina de Turing
  passo() {
    // L√™ o s√≠mbolo atual da fita (ou s√≠mbolo branco se estiver fora dos limites)
    const simboloAtual = this.fita[this.cabecote] || this.simboloBranco;

    // Busca a a√ß√£o correspondente na tabela de transi√ß√µes
    // Formato: tabelaDeTransicoes[estado_atual][simbolo_lido] = [novo_simbolo, direcao, novo_estado]
    const acao = this.tabelaDeTransicoes[this.estado]?.[simboloAtual];

    // Exibe informa√ß√µes do estado atual para debug/visualiza√ß√£o
    console.log(`\nüìç Estado atual: ${this.estado}`);
    console.log(`üìÑ S√≠mbolo lido: "${simboloAtual}"`);
    console.log(`üìç Posi√ß√£o do cabe√ßote: ${this.cabecote}`);
    console.log(`üß† Fita atual: ${this.fita.join("")}`);

    // Se n√£o h√° transi√ß√£o definida para este estado+s√≠mbolo, a m√°quina para
    if (!acao) {
      console.log("\nüö´ Nenhuma transi√ß√£o encontrada. M√°quina parou.");
      return false; // Indica que a execu√ß√£o deve parar
    }

    // Desestrutura a a√ß√£o em seus componentes
    const [novoSimbolo, direcao, novoEstado] = acao;

    // Exibe as a√ß√µes que ser√£o executadas
    console.log(`‚úçÔ∏è Escrevendo "${novoSimbolo}" na fita`);
    console.log(
      `‚û°Ô∏è Movendo para "${direcao === "D" ? "direita" : "esquerda"}"`
    );
    console.log(`üîÅ Indo para o estado "${novoEstado}"`);

    // EXECUTA AS TR√äS A√á√ïES FUNDAMENTAIS:

    // 1. Escreve o novo s√≠mbolo na posi√ß√£o atual da fita
    this.fita[this.cabecote] = novoSimbolo;

    // 2. Move o cabe√ßote conforme a dire√ß√£o especificada
    if (direcao === "D") this.cabecote++; // Direita: incrementa posi√ß√£o
    else if (direcao === "E") this.cabecote--; // Esquerda: decrementa posi√ß√£o

    // 3. Atualiza o estado da m√°quina
    this.estado = novoEstado;

    return true; // Indica que a execu√ß√£o pode continuar
  }

  // Executa a m√°quina passo a passo at√© parar ou atingir o limite
  async executar(maximoDePassos = 100) {
    let passos = 0; // Contador de passos executados

    console.log("\nüöÄ Iniciando execu√ß√£o da M√°quina de Turing");
    console.log("üí° Pressione Enter para executar cada passo...\n");

    // Loop principal de execu√ß√£o
    while (passos < maximoDePassos) {
      // Executa um passo da m√°quina
      const continuarExecucao = this.passo();

      // Se a m√°quina parou (n√£o h√° transi√ß√£o), sai do loop
      if (!continuarExecucao) {
        break;
      }

      passos++; // Incrementa contador de passos

      // Pausa para o usu√°rio ver o resultado e continuar manualmente
      await this.esperarEnter();
    }

    // Exibe resultados finais
    console.log("\n‚úÖ Execu√ß√£o finalizada.");
    console.log("üìÑ Fita final:", this.fita.join(""));
    console.log(`üìä Total de passos executados: ${passos}`);
  }

  // Fun√ß√£o auxiliar que pausa e espera o usu√°rio pressionar Enter
  esperarEnter() {
    return new Promise((resolve) => {
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      });

      rl.question("\n‚è≥ Pressione Enter para continuar...", () => {
        rl.close();
        resolve();
      });
    });
  }
}

// =============================================
// TABELA DE TRANSI√á√ïES - Define o comportamento da m√°quina
// =============================================
// Formato: { estado: { simbolo_lido: [novo_simbolo, direcao, novo_estado] } }
//
// Esta m√°quina espec√≠fica faz uma opera√ß√£o simples:
// - Converte todos os 1s em 0s
// - Mant√©m os 0s como est√£o
// - Para quando encontra uma c√©lula vazia (_)

const tabelaDeTransicoes = {
  q0: {
    // Estado inicial e √∫nico estado de processamento
    1: ["0", "D", "q0"], // Se l√™ 1: escreve 0, move direita, continua em q0
    0: ["0", "D", "q0"], // Se l√™ 0: escreve 0, move direita, continua em q0
    _: ["_", "D", "PARAR"], // Se l√™ vazio: escreve vazio, move direita, vai para PARAR
  },
};

// ============================
// INTERFACE DO USU√ÅRIO - Coleta entrada e executa a m√°quina
// ============================

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Solicita a fita inicial do usu√°rio
rl.question("Digite a fita inicial (ex: 10101): ", async (entradaFita) => {
  // Solicita o n√∫mero m√°ximo de passos
  rl.question("Digite o n√∫mero m√°ximo de passos: ", async (entradaPassos) => {
    const passos = parseInt(entradaPassos, 10); // Converte string para n√∫mero

    // Cria uma nova inst√¢ncia da m√°quina com os par√¢metros fornecidos
    const maquina = new MaquinaDeTuring(entradaFita, tabelaDeTransicoes, "q0");

    rl.close(); // Fecha o readline inicial

    // Executa a m√°quina de Turing
    await maquina.executar(passos);

    console.log("\nüëã Programa finalizado!");
    process.exit(0); // Encerra o programa
  });
});
